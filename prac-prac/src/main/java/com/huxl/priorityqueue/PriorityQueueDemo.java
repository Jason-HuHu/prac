package com.huxl.priorityqueue;

/**
 * 优先队列的简单实现
 * 1.使用一个简单的链表，O(1) 的时间执行插入操作，O（N）的时间遍历并删除最小元素
 * 2.使用一个始终排序状态的链表，插入O(N) 删除O(1)
 * 3.使用二叉查找树，删除和插入的时间复杂度均为O(logN) 插入是随机的，删除总是删除最小元素
 *
 * 使用二叉堆实现：binary heap
 *
 * 二叉堆->{结构性、堆序性} 堆是一棵被完全填满的二叉树，底层元素从左到右填充 高为h 的二叉树，有 （2^h - 2^(h+1)-1）个节点
 *
 * 完全二叉树的规律 使得不用链表就可以实现，用一个数组来存储堆元素，i 上的元素，左儿子 在 2i位置 右儿子在左儿子 后面 2i+1处 父在 (i/2)
 *
 * ---------------------------------------------------------
 *  | A  | B  | C  | D  | E  | F  | G  | H  | I  | J  |   |    |
 * ---------------------------------------------------------
 * 0  1    2    3   4    5    6     7    8    9    10   11   12
 * @author huxl
 * @since 2020/1/10-9:47
 *
 *  * 优先队列的应用
 *  1.选择问题
 */
public class PriorityQueueDemo {


}


