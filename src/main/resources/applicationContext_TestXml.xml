<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:task="http://www.springframework.org/schema/task" xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/task   
		http://www.springframework.org/schema/task/spring-task-3.0.xsd
		http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

    <!-- 定义受环境影响易变的变量 -->
    <context:property-placeholder location="classpath*:*.properties" /><!-- 目前只加载database.properties, log4j.properties -->

    <context:component-scan base-package="com.eshore">
        <context:exclude-filter expression="org.springframework.stereotype.Controller" type="annotation" /><!-- 将Controller的注解排除掉，在spring-mvc.xml单独扫描Controller注解 -->
    </context:component-scan>

    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" />
    
    <aop:aspectj-autoproxy expose-proxy="true"  proxy-target-class="true" />

    <!-- 使用加密版的属性文件 -->
    <!-- <bean class="com.eshore.khala.core.controller.pub.utils.EncryptPropertyPlaceholderConfigurer">
        <constructor-arg value="" />
        <property name="locations">
            <list>
                <value>classpath:database.properties</value>
            </list>
        </property>
    </bean> -->

    <bean class="com.eshore.khala.common.utils.SpringContextHelper" />

	<!-- <bean id="sqlQuery" class="com.eshore.khala.core.data.common.sql.SQLQueryImp">
        <property name="jdbcTemplate" ref="jdbcTemplate" />
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource" />
    </bean> -->

    <!-- ==================================JPA start================================== -->
    <!-- 用于基于JPA开发的插件加进来， 但JPA和MyBatis的事务都由JPA事务来管理 ，它是基于数据源做事务的，会接管所有的事务，推荐在Service以注解的方式声明事务，这样方便管理  -->
    <!-- Jpa Entity Manager 配置 -->
   <!--  <bean class="com.eshore.khala.core.data.jpa.spring.integration.EshoreLocalContainerEntityManagerFactoryBean" id="entityManagerFactory">
        <property name="dataSource" ref="dataSource" />
        <property name="persistenceXmlLocation" value="classpath:META-INF/persistence.XML" />
    </bean> -->
    <!-- 事务管理器配置, Jpa单数据源事务 -->
    <!-- <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean> -->
    <!-- ==================================JPA end ================================== -->
    <!-- data source -->
  <!--   <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        基本属性 url、user、password
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        配置初始化大小、最小、最大
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="20" />

        配置获取连接等待超时的时间
        <property name="maxWait" value="60000" />
        配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
        <property name="useUnfairLock" value="true" />
        配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        配置一个连接在池中最小生存的时间，单位是毫秒
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT 1 FROM DUAL" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        打开PSCache，并且指定每个连接上PSCache的大小
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

        配置监控统计拦截的filters
        <property name="filters" value="stat" />

        <property name="removeAbandoned" value="true" />
        打开removeAbandoned功能
        <property name="removeAbandonedTimeout" value="900" />
        1800秒，也就是30分钟
        <property name="logAbandoned" value="true" />
    </bean> -->
    
    <!-- data source -->
    <!-- <bean class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close" id="dataSource">
    	<property name="maxPoolSize" value="${c3p0.maxPoolSize}" />
		<property name="minPoolSize" value="${c3p0.minPoolSize}" />
		<property name="maxIdleTime" value="${c3p0.maxIdleTime}" />
		<property name="maxStatements" value="${c3p0.maxStatements}" />
		<property name="acquireIncrement" value="${c3p0.acquireIncrement}" />
		<property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}" />
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean> -->

	
</beans>